apply plugin: 'com.android.application'
apply from: '../version.gradle' //通过gradle自定义插件的方式引入配置
android {
    compileSdkVersion 28
    //等同于
//    compileSdkVersion 'android-28'
//    android.compileSdkVersion = 28

    useLibrary 'org.apache.http.legacy' //启用一些已经移除的库

    defaultConfig {
        applicationId "com.youxi.gradletest"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode appVersionCode
        versionName appVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "versionCode" //多渠道打包需要指定维度

        multiDexEnabled true //多dex支持

        resConfig 'zh' //只有zh资源会被打包
    }

    signingConfigs {
        /**
         * 可以通过在服务器获取的方式隐藏密钥信息，这里使用环境变量的方式获取
         */
        def appStoreFile = System.getenv("STORE_FILE")
        def appStorePassword = System.getenv("STORE_PASSWORD")
        def appKeyAlias = System.getenv("KEY_ALIAS")
        def appKeyPassword = System.getenv("KEY_PASSWORD")
        //如果没有签名信息，就可以用自带的debug签名
        release {
            storeFile file(appStoreFile)
            storePassword appStorePassword
            keyAlias appKeyAlias
            keyPassword appKeyPassword
        }
        debug {

        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            /**
             * 自动清理未使用资源
             * 1、使用lint，可以检测代码中那些资源没有使用并进行清理，但无法清理第三方库中未使用资源
             * 2、使用Resource Shrinking属性，他会在构建时，打包成apk之前，检测所有资源，没有被引用的资源不会被打包
             * 可以减少apk大小，要结合Code Shrinking使用，也就是ProGuard，不开启minifyEnabled会报错
             * 而使用这个也有可能误删一些通过反射获取的资源，这就是为什么需要与混淆同时使用，通过keep方法保证不被清理，res/raw/keep.xml配置
             */
            shrinkResources true
        }
        debug {

        }
    }

    productFlavors {
        /**
         * 多渠道打包
         */
        google {
            //使用占位符，方便在manifest中动态配置
            manifestPlaceholders.put("CHANNEL_ID","google")
        }
        flyme {
            manifestPlaceholders.put("CHANNEL_ID","flyme")
        }
        emui {
            //但这种方式当渠道多也需要写大量重复代码，可以通过gradle脚本执行
            manifestPlaceholders.put("CHANNEL_ID","emui")
        }
    }

    /**
     * 批量配置占位符
     */
    productFlavors.all {
        flavor ->
            manifestPlaceholders.put("CHANNEL_ID_BATCH",name)
            //在buildConfig类中添加自己的kv值方便使用，注意双引号内${var}才生效，双层嵌套加一下转义
            buildConfigField 'String','WEB_URL',"\"https://www.${name}.com\""
    }
    /**
     * 批量修改不同渠道文件名
     */
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')/** && 'release'.equals(variant.buildType.name)*/){
                def flavorName = variant.flavorName
                def apkFile = "${applicationId}_${flavorName}_v${variant.versionName}_${variant.buildType.name}.apk"
                outputFileName = apkFile
            }
        }
    }
    /**
     * 对java编译选项进行设置
     */
    compileOptions {
        encoding = 'utf-8'
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    /**
     * 对adb进行配置
     */
    adbOptions {
        timeOutInMs = 5*1000 //5s
        installOptions '-r' //强制安装
    }
    /**
     * 对dex进行配置
     */
    dexOptions {
//        incremental true //增量模式，已经过时
        javaMaxHeapSize '2g' //配置内存，报内存不足异常时调整
        jumboMode true //当函数超过65535个，需要配置该mode编译
        //preDexLibraries默认为true，提高构建速度，影响clean速度，当需要生成多个dex文件时，需要设置为false
        threadCount 2 //运行dx命令时使用的线程数，可以提高效率
    }
    /**
     * dex文件定义的方法数为short，所以最多为65535个
     * 而开发中第三方包越来越多，项目越来越庞大，很容易超过
     * 5.0之后官方给出了解决方案即Multidex，使用art运行时方式，天然支持多dex文件
     * art会在安装时预编译，把多个dex文件合成一个oat文件
     * 而5.0之前的版本，需要使用额外库
     */
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
